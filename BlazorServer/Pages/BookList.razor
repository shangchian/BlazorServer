@page "/booklist"
@using Microsoft.Extensions.Logging
@inject ILogger<BookList> _logger
@inject BlazorServer.Services.IBookService BookService


<PageTitle> BookList </PageTitle>
<h1>BookList</h1>
<input type="checkbox" id="showAllData" @bind="ShowAllColumn" />
<label for="showAllData"> Show All Column </label>
<div>Count: @SelectedCount</div>

@if (Books is null)
{
    <dir class="d-flex justify-content-center">
        <div class="spinner-border text-dark" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </dir>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th> Id </th>
                <th> Title </th>
                @if (ShowAllColumn)
                {
                    <th> Price </th>
                    <th> PublishDate </th>
                    <th> InStock </th>
                    <th> Description </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach( var item in Books ) {
                <ShowBook Book="item" ShowAll="ShowAllColumn" OnSelected="SelectionChanged"></ShowBook>
            }
        </tbody>
    </table>
}




@code {
    public bool ShowAllColumn { get; set; } = true;

    protected int SelectedCount { get; set; } = 0;

    protected void SelectionChanged(bool isSelected)
    {
        if (isSelected)
        {
            SelectedCount++;
        }
        else
        {
            SelectedCount--;
        }
    }



    protected override void OnInitialized()
    {
        //_logger.LogCritical("Critical - OnInitialized");
        //_logger.LogTrace("Trace - OnInitialized");
        //_logger.LogInformation("Information - OnInitialized");
    }

    public IEnumerable<Book> Books { get; set; } = null!;

    // 同步寫法
    //protected override Task OnInitializedAsync()
    //{
    //    LoadData();
    //    return base.OnInitializedAsync();
    //}

    // 非同步寫法
    protected override async Task OnInitializedAsync()
    {
        // await Task.Run(LoadData);                // 改成 Service 就不需要
        Books = await BookService.GetAllBooks();
    }










    /* 改成 Service 就不需要
    private void LoadData()
    {
        Books = new List<Book>()
        {
            new Book()
            {
                Id = 1,
                Title = " Essential Programming Language ",
                Price = 250,
                PublishDate = new DateTime(2019,1,2),
                InStock = true,
                Description = " Essential Programming Language "
            },
            new Book()
            {
                Id = 2,
                Title = " Telling Arts ",
                Price = 245,
                PublishDate = new DateTime(2019,4,15),
                InStock = true,
                Description = " Telling Arts "
            },
            new Book()
            {
                Id = 3,
                Title = " Marvel ",
                Price = 150,
                PublishDate = new DateTime(2019,2,21),
                InStock = true,
                Description = " Marvel "
            },
            new Book()
            {
                Id = 4,
                Title = " The beauty of cook ",
                Price = 450,
                PublishDate = new DateTime(2019,12,2),
                InStock = true,
                Description = " The beauty of cook "
            },
            new Book()
            {
                Id = 5,
                Title = " Learning how to cook ",
                Price = 450,
                PublishDate = new DateTime(2019,1,20),
                InStock = true,
                Description = " Learning how to cook "
            }
        };
    }
    */
}



@*
    // 同步寫法
    <tbody>
        @foreach( var item in Books ) {
            <tr>
                <td> @item.Id </td>
                <td> @item.Title </td>
                <td> @item.Price </td>
                <td> @item.PublishDate </td>
                <td> @item.InStock </td>
                <td> @item.Description </td>
            </tr>
        }
    </tbody>

    // 非同步寫法
*@